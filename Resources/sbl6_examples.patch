diff -crBN --binary examples/backram/gnu/font/fnt_cod1.c examples_patch/backram/gnu/font/fnt_cod1.c
*** examples/backram/gnu/font/fnt_cod1.c	1995-01-26 02:42:40.000000000 -0500
--- examples_patch/backram/gnu/font/fnt_cod1.c	2024-07-31 18:00:40.000000000 -0400
***************
*** 1,11 ****
  #include "sega_xpt.h"
  #include <stdio.h>
  
  #define		FNT_JAPAN	1
  
! extern	Uint8	FntAsciiFontData[];/* 8x16 ASCII Font ÉAÉãÉtÉ@ÉxÉbÉgïîï™ */
! extern	Uint8	FntKanaFontData[]; /* 8x16 ASCII Font Ç©Ç»ïîï™ */
! extern	Uint8	FntEouFontData[];  /* 8x16 ASCII Font ÉàÅ[ÉçÉbÉpï∂éöÅHïîï™ */
  
  extern	Uint16	FntXsize;
  extern	Uint16	FntYsize;
--- 1,12 ----
  #include "sega_xpt.h"
  #include <stdio.h>
+ #include <string.h>
  
  #define		FNT_JAPAN	1
  
! extern	Uint8	FntAsciiFontData[];/* 8x16 ASCII Font ÔøΩAÔøΩÔøΩÔøΩtÔøΩ@ÔøΩxÔøΩbÔøΩgÔøΩÔøΩÔøΩÔøΩ */
! extern	Uint8	FntKanaFontData[]; /* 8x16 ASCII Font ÔøΩÔøΩÔøΩ»ïÔøΩÔøΩÔøΩ */
! extern	Uint8	FntEouFontData[];  /* 8x16 ASCII Font ÔøΩÔøΩÔøΩ[ÔøΩÔøΩÔøΩbÔøΩpÔøΩÔøΩÔøΩÔøΩÔøΩHÔøΩÔøΩÔøΩÔøΩ */
  
  extern	Uint16	FntXsize;
  extern	Uint16	FntYsize;
***************
*** 17,23 ****
  	if(code >= 0x20 && code < 0x80)
  	    return((Uint8 *)(FntAsciiFontData+((Uint32 )(code-0x20))*16));
  	else if(code > 0xa0) {
! 	    if(FntContry = FNT_JAPAN)
  		return((Uint8 *)(FntKanaFontData+((Uint32 )(code-0xa1))*16) );
  	    else
  		return((Uint8 *)(FntEouFontData+((Uint32 )(code-0xa1))*16) );
--- 18,24 ----
  	if(code >= 0x20 && code < 0x80)
  	    return((Uint8 *)(FntAsciiFontData+((Uint32 )(code-0x20))*16));
  	else if(code > 0xa0) {
! 	    if(FntContry == FNT_JAPAN)
  		return((Uint8 *)(FntKanaFontData+((Uint32 )(code-0xa1))*16) );
  	    else
  		return((Uint8 *)(FntEouFontData+((Uint32 )(code-0xa1))*16) );
***************
*** 91,97 ****
  			wx += 8;
  		}
  		if(wx+8 >= FntXsize) {
! 			wx = x;wy += 18;/* â¸çs */
  			if(wy > FntYsize-15)	return;
  		}
  		i++;
--- 92,98 ----
  			wx += 8;
  		}
  		if(wx+8 >= FntXsize) {
! 			wx = x;wy += 18;/* ÔøΩÔøΩÔøΩs */
  			if(wy > FntYsize-15)	return;
  		}
  		i++;
diff -crBN --binary examples/devcon96/3d/3d.c examples_patch/devcon96/3d/3d.c
*** examples/devcon96/3d/3d.c	1996-03-18 12:30:26.000000000 -0500
--- examples_patch/devcon96/3d/3d.c	2022-02-12 18:24:08.000000000 -0500
***************
*** 615,745 ****
  
  #else
  
! asm("
! 		.globl	_Fsqrt
! 		sts.l	pr,@-r15
! 		mov.l	@r4,r1			/*  Fetch the three coordinates.       */
! 		mov.l	@(4,r4),r2
! 		mov.l	@(8,r4),r3
! 
! 		xor		r0,r0			/*  Take the absolute values of the    */
! 		cmp/gt	r1,r0			/*  coordinates.                       */
! 		bf		GotAbsX
! 		neg		r1,r1
! GotAbsX:
! 		cmp/gt	r2,r0
! 		bf		GotAbsY
! 		neg		r2,r2
! GotAbsY:
! 		cmp/gt	r3,r0
! 		bf		GotAbsZ
! 		neg		r3,r3
! GotAbsZ:
! 		mov		r1,r5			/*  Take a rough measure of the vec-   */
! 		add		r2,r5			/*    tor's length, and use the rough  */
! 		add		r3,r5			/*    size to decide how to compute    */
! 		mov		#128,r0			/*    a more precise length value with */
! 		extu.b	r0,r0   		/*    minimal loss of precision.       */
! 		shll16	r0
! 		cmp/gt	r5,r0
! 		mov.l	@(Fsqrt, pc), r6
! 		bt		NoShift
! 		shll8	r0				/*  Convert the fixed-point representa-*/
! 		shlr	r0				/*    tion of 128 into a fixed-point   */
! 		cmp/gt	r5,r0			/*    representation of 16384, and re- */
! 		bt		ShiftSome		/*    peat the previous test.          */
  
  		/*
  		 *  The coordinate values are quite large, so shift them a good deal
  		 *  before squaring them, so as to prevent overflow.
  		 */
! 		shlr8	r1
! 		shlr8	r2
! 		shlr8	r3
! 
! 		dmulu.l	r1,r1			/*  Compute the sum of the squares.    */
! 		sts		macl,r0
! 		sts		mach,r1
! 		xtrct	r1,r0
! 		mov		r0,r4
! 
! 		dmulu.l	r2,r2
! 		sts		macl,r0
! 		sts		mach,r1
! 		xtrct	r1,r0
! 		add		r0,r4
! 
! 		dmulu.l	r3,r3
! 		sts		macl,r0
! 		sts		mach,r1
! 		xtrct	r1,r0
! 		jsr		@r6				/*  Compute the square root.  No more  */
! 		add		r0,r4			/*    shifting is needed.              */
  
! 		bra		VLOut
! 		nop
  
  		/*
  		 *  The coordinate values are reasonably large, so shift them down
  		 *  some before multiplying them to prevent overflow.
  		 */
! ShiftSome:
! 		shlr2	r1
! 		shlr2	r1
! 		shlr2	r2
! 		shlr2	r2
! 		shlr2	r3
! 		shlr2	r3
! 
! 		dmulu.l	r1,r1			/*  Compute the sum of the squares,    */
! 		sts		macl,r0			/*    shifting a bit more as we go.    */
! 		sts		mach,r1
! 		xtrct	r1,r0
! 		shlr2	r0
! 		mov		r0,r4
! 
! 		dmulu.l	r2,r2
! 		sts		macl,r0
! 		sts		mach,r1
! 		xtrct	r1,r0
! 		shlr2	r0
! 		add		r0,r4
! 
! 		dmulu.l	r3,r3
! 		sts		macl,r0
! 		sts		mach,r1
! 		xtrct	r1,r0
! 		shlr2	r0
! 		jsr		@r6
! 		add		r0,r4
! 
! 		shlr2	r0
! 		bra		VLOut
! 		shlr	r0
! 
! 		.align	2
! Fsqrt:
! 		.long	_Fsqrt
  
  		/*
  		 *  The coordinates are small, so we don't want to shift them until
  		 *  the very end, so as to preserve as much precision as possible.
  		 */
! NoShift:
! 		mov		r4,r5
! 		clrmac
! 		mac.l	@r4+,@r5+		/*  Calculate the sum of the squares   */
! 		mac.l	@r4+,@r5+		/*    of the coordinates.              */
! 		mac.l	@r4+,@r5+
! 		sts		macl,r0
! 		sts		mach,r1
! 		xtrct	r1,r0
! 		jsr		@r6				/*  Get the square root, which needs   */
! 		mov		r0,r4			/*    to be shifted to make it conform */
! 		shlr8	r0				/*    to the fixed-point format.       */
! VLOut:
! 		lds.l	@r15+,pr
! ");
  
  #endif
  }
--- 615,745 ----
  
  #else
  
! asm(
! "		.globl	_Fsqrt\n"
! "		sts.l	pr,@-r15\n"
! "		mov.l	@r4,r1\n"			/*  Fetch the three coordinates.       */
! "		mov.l	@(4,r4),r2\n"
! "		mov.l	@(8,r4),r3\n"
! 
! "		xor		r0,r0	\n"		/*  Take the absolute values of the    */
! "		cmp/gt	r1,r0\n"			/*  coordinates.                       */
! "		bf		GotAbsX\n"
! "		neg		r1,r1\n"
! "GotAbsX:\n"
! "		cmp/gt	r2,r0\n"
! "		bf		GotAbsY\n"
! "		neg		r2,r2\n"
! "GotAbsY:\n"
! "		cmp/gt	r3,r0\n"
! "		bf		GotAbsZ\n"
! "		neg		r3,r3\n"
! "GotAbsZ:\n"
! "		mov		r1,r5\n"			/*  Take a rough measure of the vec-   */
! "		add		r2,r5\n"			/*    tor's length, and use the rough  */
! "		add		r3,r5\n"			/*    size to decide how to compute    */
! "		mov		#128,r0\n"			/*    a more precise length value with */
! "		extu.b	r0,r0\n"   		/*    minimal loss of precision.       */
! "		shll16	r0\n"
! "		cmp/gt	r5,r0\n"
! "		mov.l	@(Fsqrt, pc), r6\n"
! "		bt		NoShift\n"
! "		shll8	r0\n"				/*  Convert the fixed-point representa-*/
! "		shlr	r0\n"				/*    tion of 128 into a fixed-point   */
! "		cmp/gt	r5,r0\n"			/*    representation of 16384, and re- */
! "		bt		ShiftSome\n"		/*    peat the previous test.          */
  
  		/*
  		 *  The coordinate values are quite large, so shift them a good deal
  		 *  before squaring them, so as to prevent overflow.
  		 */
! "		shlr8	r1\n"
! "		shlr8	r2\n"
! "		shlr8	r3\n"
! 
! "		dmulu.l	r1,r1\n"			/*  Compute the sum of the squares.    */
! "		sts		macl,r0\n"
! "		sts		mach,r1\n"
! "		xtrct	r1,r0\n"
! "		mov		r0,r4\n"
! 
! "		dmulu.l	r2,r2\n"
! "		sts		macl,r0\n"
! "		sts		mach,r1\n"
! "		xtrct	r1,r0\n"
! "		add		r0,r4\n"
! 
! "		dmulu.l	r3,r3\n"
! "		sts		macl,r0\n"
! "		sts		mach,r1\n"
! "		xtrct	r1,r0\n"
! "		jsr		@r6	\n"			/*  Compute the square root.  No more  */
! "		add		r0,r4	\n"		/*    shifting is needed.              */
  
! "		bra		VLOut\n"
! "		nop\n"
  
  		/*
  		 *  The coordinate values are reasonably large, so shift them down
  		 *  some before multiplying them to prevent overflow.
  		 */
! "ShiftSome:\n"
! "		shlr2	r1\n"
! "		shlr2	r1\n"
! "		shlr2	r2\n"
! "		shlr2	r2\n"
! "		shlr2	r3\n"
! "		shlr2	r3\n"
! 
! "		dmulu.l	r1,r1\n"			/*  Compute the sum of the squares,    */
! "		sts		macl,r0\n"			/*    shifting a bit more as we go.    */
! "		sts		mach,r1\n"
! "		xtrct	r1,r0\n"
! "		shlr2	r0\n"
! "		mov		r0,r4\n"
! 
! "		dmulu.l	r2,r2\n"
! "		sts		macl,r0\n"
! "		sts		mach,r1\n"
! "		xtrct	r1,r0\n"
! "		shlr2	r0\n"
! "		add		r0,r4\n"
! 
! "		dmulu.l	r3,r3\n"
! "		sts		macl,r0\n"
! "		sts		mach,r1\n"
! "		xtrct	r1,r0\n"
! "		shlr2	r0\n"
! "		jsr		@r6\n"
! "		add		r0,r4\n"
! 
! "		shlr2	r0\n"
! "		bra		VLOut\n"
! "		shlr	r0\n"
! 
! "		.align	2\n"
! "Fsqrt:\n"
! "		.long	_Fsqrt\n"
  
  		/*
  		 *  The coordinates are small, so we don't want to shift them until
  		 *  the very end, so as to preserve as much precision as possible.
  		 */
! "NoShift:\n"
! "		mov		r4,r5\n"
! "		clrmac\n"
! "		mac.l	@r4+,@r5+\n"		/*  Calculate the sum of the squares   */
! "		mac.l	@r4+,@r5+\n"		/*    of the coordinates.              */
! "		mac.l	@r4+,@r5+\n"
! "		sts		macl,r0\n"
! "		sts		mach,r1\n"
! "		xtrct	r1,r0\n"
! "		jsr		@r6	\n"			/*  Get the square root, which needs   */
! "		mov		r0,r4	\n"		/*    to be shifted to make it conform */
! "		shlr8	r0		\n"		/*    to the fixed-point format.       */
! "VLOut:\n"
! "		lds.l	@r15+,pr\n"
! );
  
  #endif
  }
***************
*** 870,926 ****
  
  #else
  
! asm("
  		/*
  		 *  Do the first statement in the above for-loop.
  		 */
! RotLoop:
! 		clrmac
! 		mac.l	@r5+,@r4+    /*  Compute ptsIn[i].x * (*mat)[0][0].   */
! 		mac.l	@r5+,@r4+    /*  Compute ptsIn[i].y * (*mat)[0][1].   */
! 		mac.l	@r5+,@r4+    /*  Compute ptsIn[i].z * (*mat)[0][2].   */
! 		sts		macl,r0      /*  Retrieve the sum of the products and */
! 		sts		mach,r1      /*    convert it back to 16.16 fixed     */
! 		xtrct	r1,r0        /*    point format.                      */
! 		mov.l	r0,@r6       /*  Store the result to ptsOut[i].x      */
! 		add		#4,r6        /*  Point at ptsOut[i].y                 */
! 		add		#-12,r5      /*  Point at ptsIn[i].x                  */
  
  		/*
  		 *  Do the second statement in the above for-loop.
  		 */
! 		clrmac
! 		mac.l	@r5+,@r4+    /*  Compute ptsIn[i].x * (*mat)[1][0].   */
! 		mac.l	@r5+,@r4+    /*  Compute ptsIn[i].y * (*mat)[1][1].   */
! 		mac.l	@r5+,@r4+    /*  Compute ptsIn[i].z * (*mat)[1][2].   */
! 		sts		macl,r0      /*  Retrieve the sum of the products and */
! 		sts		mach,r1      /*    convert it back to 16.16 fixed     */
! 		xtrct	r1,r0        /*    point format.                      */
! 		mov.l	r0,@r6       /*  Store the result to ptsOut[i].y      */
! 		add		#4,r6        /*  Point at ptsOut[i].z                 */
! 		add		#-12,r5      /*  Point at ptsIn[i].x                  */
  
  		/*
  		 *  Do the third statement in the above for-loop.
  		 */
! 		clrmac
! 		mac.l	@r5+,@r4+    /*  Compute ptsIn[i].x * (*mat)[2][0].   */
! 		mac.l	@r5+,@r4+    /*  Compute ptsIn[i].y * (*mat)[2][1].   */
! 		mac.l	@r5+,@r4+    /*  Compute ptsIn[i].z * (*mat)[2][2].   */
! 		add		#-36,r4      /*  Point at (*mat)[0][0].               */
! 		sts		macl,r0      /*  Retrieve the sum of the products and */
! 		sts		mach,r1      /*    convert it back to 16.16 fixed     */
! 		xtrct	r1,r0        /*    point format.                      */
! 		mov.l	r0,@r6       /*  Store the result to ptsOut[i].z      */
  
  		/*
  		 *  Decrement the loop counter and branch back.
  		 */
! 		add		#-1,r7
! 		tst		r7,r7
! 		bf.s	RotLoop
! 		add		#4,r6        /*  Point at ptsOut[i+1].x               */
! ");
  
  #endif
  }
--- 870,926 ----
  
  #else
  
! asm(
  		/*
  		 *  Do the first statement in the above for-loop.
  		 */
! "RotLoop:\n"
! "		clrmac\n"
! "		mac.l	@r5+,@r4+\n"    /*  Compute ptsIn[i].x * (*mat)[0][0].   */
! "		mac.l	@r5+,@r4+\n"    /*  Compute ptsIn[i].y * (*mat)[0][1].   */
! "		mac.l	@r5+,@r4+\n"    /*  Compute ptsIn[i].z * (*mat)[0][2].   */
! "		sts		macl,r0\n"      /*  Retrieve the sum of the products and */
! "		sts		mach,r1 \n"     /*    convert it back to 16.16 fixed     */
! "		xtrct	r1,r0 \n"       /*    point format.                      */
! "		mov.l	r0,@r6 \n"      /*  Store the result to ptsOut[i].x      */
! "		add		#4,r6  \n"      /*  Point at ptsOut[i].y                 */
! "		add		#-12,r5  \n"    /*  Point at ptsIn[i].x                  */
  
  		/*
  		 *  Do the second statement in the above for-loop.
  		 */
! "		clrmac\n"
! "		mac.l	@r5+,@r4+  \n"  /*  Compute ptsIn[i].x * (*mat)[1][0].   */
! "		mac.l	@r5+,@r4+  \n"  /*  Compute ptsIn[i].y * (*mat)[1][1].   */
! "		mac.l	@r5+,@r4+  \n"  /*  Compute ptsIn[i].z * (*mat)[1][2].   */
! "		sts		macl,r0  \n"    /*  Retrieve the sum of the products and */
! "		sts		mach,r1  \n"    /*    convert it back to 16.16 fixed     */
! "		xtrct	r1,r0   \n"     /*    point format.                      */
! "		mov.l	r0,@r6   \n"    /*  Store the result to ptsOut[i].y      */
! "		add		#4,r6   \n"     /*  Point at ptsOut[i].z                 */
! "		add		#-12,r5   \n"   /*  Point at ptsIn[i].x                  */
  
  		/*
  		 *  Do the third statement in the above for-loop.
  		 */
! "		clrmac\n"
! "		mac.l	@r5+,@r4+ \n"   /*  Compute ptsIn[i].x * (*mat)[2][0].   */
! "		mac.l	@r5+,@r4+   \n" /*  Compute ptsIn[i].y * (*mat)[2][1].   */
! "		mac.l	@r5+,@r4+ \n"   /*  Compute ptsIn[i].z * (*mat)[2][2].   */
! "		add		#-36,r4    \n"  /*  Point at (*mat)[0][0].               */
! "		sts		macl,r0   \n"   /*  Retrieve the sum of the products and */
! "		sts		mach,r1   \n"   /*    convert it back to 16.16 fixed     */
! "		xtrct	r1,r0    \n"    /*    point format.                      */
! "		mov.l	r0,@r6   \n"    /*  Store the result to ptsOut[i].z      */
  
  		/*
  		 *  Decrement the loop counter and branch back.
  		 */
! "		add		#-1,r7\n"
! "		tst		r7,r7\n"
! "		bf.s	RotLoop\n"
! "		add		#4,r6   \n"     /*  Point at ptsOut[i+1].x               */
! );
  
  #endif
  }
diff -crBN --binary examples/devcon96/util/int.c examples_patch/devcon96/util/int.c
*** examples/devcon96/util/int.c	1996-03-14 09:54:50.000000000 -0500
--- examples_patch/devcon96/util/int.c	2024-08-01 14:38:04.000000000 -0400
***************
*** 77,86 ****
  
  void MyVblankIn()
  {
! 	asm("
! 		sts.l	macl,@-r15
! 		sts.l	mach,@-r15
! 	");
  
  	inVblank = 1;
  
--- 77,84 ----
  
  void MyVblankIn()
  {
! 	asm("   sts.l	macl,@-r15\n"
! 	    "	sts.l	mach,@-r15");
  
  	inVblank = 1;
  
***************
*** 105,114 ****
  	updateVDP2regs = 0;
  	++frameCount;
  
! 	asm("
! 		lds.l	@r15+,mach
! 		lds.l	@r15+,macl
! 	");
  }
  
  /***************************************************************************
--- 103,111 ----
  	updateVDP2regs = 0;
  	++frameCount;
  
! 	asm("   lds.l	@r15+,mach\n"
! 	    "	lds.l	@r15+,macl");
! 
  }
  
  /***************************************************************************
***************
*** 121,130 ****
  {
  	Uint16	PadData1Old, PadData2Old;
  
! 	asm("
! 		sts.l	macl,@-r15
! 		sts.l	mach,@-r15
! 	");
  
  	if (bufSwapState == VDP1_BUF_SWAPPING)
  		VDP1SwapBuffers();
--- 118,125 ----
  {
  	Uint16	PadData1Old, PadData2Old;
  
! 	asm("   sts.l	macl,@-r15\n"
! 	    "	sts.l	mach,@-r15");
  
  	if (bufSwapState == VDP1_BUF_SWAPPING)
  		VDP1SwapBuffers();
***************
*** 146,155 ****
  		PadData2E |= (PadData2 ^ PadData2Old) & PadData2;
  	}
  
! 	asm("
! 		lds.l	@r15+,mach
! 		lds.l	@r15+,macl
! 	");
  }
  
  /***************************************************************************
--- 141,149 ----
  		PadData2E |= (PadData2 ^ PadData2Old) & PadData2;
  	}
  
! 	asm("   lds.l	@r15+,mach\n"
! 	    "	lds.l	@r15+,macl");
! 
  }
  
  /***************************************************************************
***************
*** 207,216 ****
  
  	for (i = 0; i < n; ++i)
  	{
! 		while ((volatile) inVblank)
  			;
  
! 		while ((volatile) (!inVblank))
  			;
  	}
  }
--- 201,210 ----
  
  	for (i = 0; i < n; ++i)
  	{
! 		while ((volatile Uint8) inVblank)
  			;
  
! 		while ((volatile Uint8) (!inVblank))
  			;
  	}
  }
***************
*** 223,232 ****
  
  void WaitVBlank()
  {
! 		while ((volatile) inVblank)
  			;
  
! 		while ((volatile) (!inVblank))
  			;
  }
  
--- 217,226 ----
  
  void WaitVBlank()
  {
! 		while ((volatile Uint8) inVblank)
  			;
  
! 		while ((volatile Uint8) (!inVblank))
  			;
  }
  
***************
*** 238,246 ****
  
  void WaitVBlankEnd()
  {
! 		while ((volatile) (!inVblank))
  			;
  
! 		while ((volatile) inVblank)
  			;
  }
--- 232,240 ----
  
  void WaitVBlankEnd()
  {
! 		while ((volatile Uint8) (!inVblank))
  			;
  
! 		while ((volatile Uint8) inVblank)
  			;
  }
diff -crBN --binary examples/devcon96/util/stmem.c examples_patch/devcon96/util/stmem.c
*** examples/devcon96/util/stmem.c	1996-03-20 11:02:52.000000000 -0500
--- examples_patch/devcon96/util/stmem.c	2022-02-12 18:09:38.000000000 -0500
***************
*** 134,140 ****
  	for (i = 0; i < MAXBLOCKS; ++i)
  	{
  		if (stMem[i].heap == heapIndex)
! 			InitBlock[i];
  	}
  
  	i = firstBlock[heapIndex];
--- 134,140 ----
  	for (i = 0; i < MAXBLOCKS; ++i)
  	{
  		if (stMem[i].heap == heapIndex)
! 			InitBlock(i);
  	}
  
  	i = firstBlock[heapIndex];
