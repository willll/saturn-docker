#!/bin/sh

# Copyright (c) 2012-2017
# See LICENSE for details.
#
# Israel Jacquez <mrkotfw@gmail.com>

PROGNAME="${0##*/}"
TMPDIR="${TMPDIR:-/tmp}"

# If empty, default to YAUL_ARCH_SH_PREFIX
if [ -z "${YAUL_PROG_SH_PREFIX}" ]; then
    YAUL_PROG_SH_PREFIX=$(printf "%s" "${YAUL_ARCH_SH_PREFIX}")
fi

SH_AS="${YAUL_SH_TOOLCHAIN}/bin/${YAUL_PROG_SH_PREFIX}-as"
SH_AS_ARGS="--fatal-warnings -I"${YAUL_INSTALL_ROOT}/share/yaul/ip""
SH_CC="${YAUL_SH_TOOLCHAIN}/bin/${YAUL_PROG_SH_PREFIX}-gcc"
SH_CC_ARGS="-nostdlib -m2 -mb -nostartfiles -specs=${YAUL_INSTALL_ROOT}/${YAUL_ARCH_SH_PREFIX}/lib/ip.specs"

panic() {
    printf -- "%s: Error: %s\\n" "${PROGNAME}" "${1}" >&2
    exit "${2}"
}

if [ ${#} != 10 ]; then
    printf -- "Usage: %s %s\\n" "${PROGNAME}" "1st-ready-binary version release-date areas peripherals title master-stack-addr slave-stack-addr 1st-read-addr 1st-read-size" >&2
    exit 2
fi

[ -n "${YAUL_INSTALL_ROOT}" ] || panic "Undefined YAUL_INSTALL_ROOT (install root directory)" 1
[ -d "${YAUL_INSTALL_ROOT}" ] || panic "Invalid YAUL_INSTALL_ROOT (install root directory) value" 1
[ -n "${YAUL_ARCH_SH_PREFIX}" ] || panic "Undefined YAUL_ARCH_SH_PREFIX (tool-chain prefix)" 1
[ -x "${SH_AS}" ] || panic "Invalid executable \`${SH_AS}'" 1
[ -x "${SH_CC}" ] || panic "Invalid executable \`${SH_CC}'" 1

TMP1_FILE="$(mktemp "${TMPDIR}/XXXX")" || panic "Couldn't create file" 1
TMP2_FILE="$(mktemp "${TMPDIR}/XXXX")" || panic "Couldn't create file" 1
TMP3_FILE="$(mktemp "${TMPDIR}/XXXX")" || panic "Couldn't create file" 1

clean_up() {
    rm -f "${TMP1_FILE}"
    rm -f "${TMP2_FILE}"
    rm -f "${TMP3_FILE}"
}

trap '_exit_code=${?}; clean_up; exit ${_exit_code}' 0
trap 'clean_up; exit 1' HUP INT QUIT ABRT SEGV PIPE

# Sanitize for 1st read binary
IP_1ST_READ_BINARY="${1}"
# Sanitize for string
IP_VERSION="${2}"
# Sanitize for integer value
IP_RELEASE_DATE=${3}
# Sanitize for string
IP_AREAS="${4}"
# Sanitize for string
IP_PERIPHERALS="${5}"
# Sanitize for string
IP_TITLE="${6}"
# Sanitize for integer value
IP_MASTER_STACK_ADDR=${7}
# Sanitize for integer value
IP_SLAVE_STACK_ADDR=${8}
# Sanitize for integer value
IP_1ST_READ_ADDR=${9}
# Sanitize for integer value
IP_1ST_READ_SIZE="${10}"

OUTPUT_PATH=$(dirname "${1}")

SH_CC_ARGS="-Wl,-Map,${OUTPUT_PATH}/IP.BIN.map ${SH_CC_ARGS}"

IP_1ST_READ_BINARY_SIZE="$(stat -c "%s" "${IP_1ST_READ_BINARY}")"

# Only when the value is negative should use the actual 1st read binary size
if [ ${IP_1ST_READ_SIZE} -lt 0 ]; then
    # As reported by hitomi2500, there is a minimum size required when 1st read
    # size is specified
    if [ "${IP_1ST_READ_BINARY_SIZE}" -lt $((0x00020000)) ]; then
          IP_1ST_READ_SIZE=$((0x00020000))
    else
        IP_1ST_READ_SIZE=${IP_1ST_READ_BINARY_SIZE}
    fi
fi

(awk '/\.ascii \"\$VERSION\"/ { sub(/\$VERSION/, "'"${IP_VERSION}"'"); }
      /\.ascii \"\$RELEASE_DATE\"/ { sub(/\$RELEASE_DATE/, "'"${IP_RELEASE_DATE}"'"); }
      /\.ascii \"\$AREAS\"/ { printf ".ascii \"%-10.10s\"\n", "'"${IP_AREAS}"'"; next; }
      /\.ascii \"\$PERIPHERALS\"/ { printf ".ascii \"%-16.16s\"\n", "'"${IP_PERIPHERALS}"'"; next; }
      /\.ascii \"\$TITLE\"/ {
          L = 7;
          # Truncate to 112 characters
          s = "'"${IP_TITLE}"'";
          # Strip out control characters
          gsub(/[\t\r\v\n\f]/, "", s);
          s = substr(s, 0, 112);
          t = s;
          q = length(s);
          l = q;
          while (l > 0) {
              printf ".ascii \"%-16.16s\"\n", t;
              a = ((l - 16) >= 0) ? 16 : l;
              l -= a;
              t = substr(t, a + 1, q - a);
              L--;
          }
          while (L > 0) {
              printf ".ascii \"                \"\n";
              L--;
          }
          next;
      }
      /\.long \$MASTER_STACK_ADDR/ { sub(/\$MASTER_STACK_ADDR/, "'"${IP_MASTER_STACK_ADDR}"'"); }
      /\.long \$SLAVE_STACK_ADDR/ { sub(/\$SLAVE_STACK_ADDR/, "'"${IP_SLAVE_STACK_ADDR}"'"); }
      /\.long \$1ST_READ_ADDR/ { sub(/\$1ST_READ_ADDR/, "'"${IP_1ST_READ_ADDR}"'"); }
      /\.long \$1ST_READ_SIZE/ { sub(/\$1ST_READ_SIZE/, "'"${IP_1ST_READ_SIZE}"'"); }
      { print; }' \
          "${YAUL_INSTALL_ROOT}/share/yaul/ip/ip.sx") >"${TMP2_FILE}" 2>"${TMP3_FILE}" || {
     panic "Can't generate IP.BIN .sx file
>>>
$(cat "${TMP3_FILE}")
<<<" 1
 }

("${SH_AS}" ${SH_AS_ARGS} -o "${TMP1_FILE}" "${TMP2_FILE}") >"${TMP3_FILE}" 2>&1 || {
    panic "Can't build IP.BIN (${SH_AS})
>>>
$(cat "${TMP3_FILE}")
<<<" 1
}

("${SH_CC}" ${SH_CC_ARGS} "${TMP1_FILE}" -o "${OUTPUT_PATH}/IP.BIN") >"${TMP3_FILE}" 2>&1 || {
    panic "Can't build IP.BIN (${SH_CC})
>>>
$(cat "${TMP3_FILE}")
<<<" 1
}

clean_up
