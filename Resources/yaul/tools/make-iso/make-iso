#!/bin/sh

# Copyright (c) Israel Jacquez
# See LICENSE for details.
#
# Israel Jacquez <mrkotfw@gmail.com>

PROGNAME="${0##*/}"

panic() {
    printf -- "%s: Error: %s\\n" "${PROGNAME}" "${1}" >&2
    exit "${2}"
}

TMP1_FILE="$(mktemp "${TMPDIR:-/tmp}/tmp.XXXX")" || panic "Couldn't create file" 1

my_readlink() {
    # Not a true implementation of readlink
    printf -- "%s" $(cd $(dirname "${1}") 2>/dev/null && pwd -P && echo "/$(basename ${1})")
}

clean_up() {
    rm -f "${TMP1_FILE}"
}

trap '_exit_code=${?}; clean_up; exit ${_exit_code}' 0
trap 'clean_up; exit 1' HUP INT QUIT ABRT SEGV PIPE

if ! [ ${#} -eq 4 ]; then
    printf -- "Usage: %s cd-directory IP.BIN-path image-output-path image-output-name\n" "${PROGNAME}" >&2
    exit 2
fi

[ -n "${YAUL_INSTALL_ROOT}" ]  || panic "Undefined YAUL_INSTALL_ROOT (install root directory)" 1
[ -d "${YAUL_INSTALL_ROOT}" ]  || panic "Invalid YAUL_INSTALL_ROOT (install root directory) value" 1

[ -n "${MAKE_ISO_XORRISOFS}" ] || [ -n "${MAKE_ISO_XORRISO}" ] || panic "Undefined MAKE_ISO_XORRISOFS (xorrisofs executable absolute path)" 1

# XXX: Remove when bumping version
if ! [ -n "${MAKE_ISO_XORRISOFS}" ]; then
    MAKE_ISO_XORRISOFS="${MAKE_ISO_XORRISO}"
fi

[ -x "${MAKE_ISO_XORRISOFS}" ] || panic "Invalid executable: \`${MAKE_ISO_XORRISOFS}'" 1

# Detect that xorrisofs was specified. As of version 1.5.4, this helps to
# distinguish between xorriso and xorrisofs
"${MAKE_ISO_XORRISOFS}" --help 2>&1 | grep -q 'xorriso -as mkisofs' || panic "Executable is not \`xorrisofs'" 1

cd_directory=$(my_readlink "${1}")
ip_bin_path=$(my_readlink "${2}")
output_directory=$(my_readlink "${3}")
image="${4}"

# Check if the CD directory exists and is a directory
[ -L "${cd_directory}" ] && { panic "${cd_directory}: CD directory must not be a symbolic link" 1; }
[ -d "${cd_directory}" ] || { panic "${cd_directory}: CD directory does not exist" 1; }
[ -r "${cd_directory}" ] || { panic "${cd_directory}: CD directory is not readable" 1; }
[ -x "${cd_directory}" ] || { panic "${cd_directory}: CD directory is inaccessible" 1; }

# Check if the output directory exists and is a directory
[ -L "${output_directory}" ] && { panic "${output_directory}: Output directory must not be a symbolic link" 1; }
[ -d "${output_directory}" ] || { panic "${output_directory}: Output directory does not exist" 1; }
[ -r "${output_directory}" ] || { panic "${output_directory}: Output directory is not readable" 1; }
[ -w "${output_directory}" ] || { panic "${output_directory}: Output directory is not writable" 1; }
[ -x "${output_directory}" ] || { panic "${output_directory}: Output directory is inaccessible" 1; }

# Check if all the files are present
for file in "${ip_bin_path}" "${cd_directory}/ABS.TXT" "${cd_directory}/BIB.TXT" "${cd_directory}/CPY.TXT"; do
    # Needs to be portable (alternative to readlink)
    realpath=$(my_readlink "${file}")

    [ -z "${realpath}" ] && { panic "$(basename "${file}"): Unable to dereference symbolic link" 1; }
    [ -d "${realpath}" ] && { panic "$(basename "${realpath}"): Not a file" 1; }
    [ -f "${realpath}" ] || { panic "$(basename "${realpath}"): Does not exist in $(dirname "${realpath}")" 1; }
    [ -r "${realpath}" ] || { panic "$(basename "${realpath}"): File is not readable" 1; }
done
unset realpath

# Check if ${MAKE_ISO_XORRISOFS} is installed
iso_tool_realpath=$(my_readlink "${MAKE_ISO_XORRISOFS}")
if ! [ -f "${iso_tool_realpath}" ] && ! [ -L "${iso_tool_realpath}" ]; then
    panic "${MAKE_ISO_XORRISOFS}: Does not exist" 1
fi

if ! [ -x "${iso_tool_realpath}" ]; then
    panic "${MAKE_ISO_XORRISOFS}: Not an executable" 1
fi
unset iso_tool_realpath

# Echo options used
printf -- "%s %s" "${MAKE_ISO_XORRISOFS}" "${XORRISO_OPTIONS}" >> "${TMP1_FILE}"

# Force delete the existing ISO
rm -f "${image}.iso"

if ! (eval "${MAKE_ISO_XORRISOFS}" "--norock -sysid \"SEGA SEGASATURN\" -volid \"\" -volset \"\" -publisher \"SEGA ENTERPRISES, LTD.\" -preparer \"SEGA ENTERPRISES, LTD.\" -appid \"SEGA ENTERPRISES, LTD.\" -iso-level 1 -input-charset iso8859-1 -no-bak -m \".*\" -abstract \"ABS.TXT\" -biblio \"BIB.TXT\" -copyright \"CPY.TXT\" -generic-boot \"\${ip_bin_path}\" -verbose -o \"${output_directory}/${image}.iso\" \"\${cd_directory}\"") >>"${TMP1_FILE}" 2>&1; then
    panic "Unable to create \"${image}.iso\"
>>>
$(sed -E '/^$/d;s/^/>>> /g' "${TMP1_FILE}")
<<<" 1
fi

sed -E '/^$/d;s/^/>>> /g' "${TMP1_FILE}"

clean_up
